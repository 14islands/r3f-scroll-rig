{"version":3,"file":"powerups.module.js","sources":["../powerups/WebGLText.tsx","../powerups/WebGLImage.tsx","../../node_modules/react-merge-refs/dist/react-merge-refs.esm.js","../powerups/ParallaxScrollScene.tsx","../powerups/StickyScrollScene.tsx","../../node_modules/@14islands/lerp/index.js","../../node_modules/lerp/index.js"],"sourcesContent":["import React, { useMemo, useEffect, ReactNode, MutableRefObject } from 'react'\nimport { Color, Material } from 'three'\nimport { useThree } from '@react-three/fiber'\nimport { Text } from '@react-three/drei'\n\nimport { useScrollRig } from '@14islands/r3f-scroll-rig'\n\n/**\n * Returns a WebGL Troika text mesh styled as the source DOM element\n */\n\ninterface WebGLTextProps {\n  el: MutableRefObject<HTMLElement>\n  children?: ReactNode\n  material?: Material\n  scale?: any\n  font?: string\n  fontOffsetY?: number\n  fontOffsetX?: number\n  overrideEmissive?: boolean\n  color?: string\n}\n\nexport const WebGLText = ({\n  el,\n  children,\n  material,\n  scale,\n  font,\n  fontOffsetY = 0,\n  fontOffsetX = 0,\n  overrideEmissive = false,\n  color,\n  ...props\n}: WebGLTextProps) => {\n  const { size } = useThree()\n  const { scaleMultiplier } = useScrollRig()\n\n  const { textColor, fontSize, textAlign, lineHeight, letterSpacing } = useMemo(() => {\n    if (!el.current) return {}\n    const cs = window.getComputedStyle(el.current)\n\n    // font size relative letter spacing\n    const letterSpacing = (parseFloat(cs.letterSpacing) || 0) / parseFloat(cs.fontSize)\n    const lineHeight = (parseFloat(cs.lineHeight) || 0) / parseFloat(cs.fontSize)\n    const textColor = new Color(color || cs.color).convertSRGBToLinear()\n\n    return {\n      letterSpacing,\n      lineHeight,\n      textColor,\n      fontSize: parseFloat(cs.fontSize) * scaleMultiplier,\n      textAlign: cs.textAlign,\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [el, size, scale, color, scaleMultiplier]) // recalc on resize\n\n  useEffect(() => {\n    if (material && overrideEmissive) {\n      // @ts-ignore\n      material.emissive = color\n    }\n  }, [material, color, overrideEmissive])\n\n  let xOffset = 0\n  if (textAlign === 'left' || textAlign === 'start') {\n    xOffset = scale[0] * -0.5\n  } else if (textAlign === 'right' || textAlign === 'end') {\n    xOffset = scale[0] * 0.5\n  }\n\n  const yOffset = scale ? scale[1] * 0.5 : size.height * 0.5\n\n  return (\n    <Text\n      fontSize={fontSize}\n      maxWidth={scale ? scale[0] : size.width}\n      lineHeight={lineHeight}\n      // @ts-ignore\n      textAlign={textAlign}\n      letterSpacing={letterSpacing}\n      overflowWrap=\"break-word\"\n      font={font}\n      color={textColor}\n      // @ts-ignore\n      anchorX={textAlign}\n      anchorY=\"top\" // so text moves down if row breaks\n      // @ts-ignore\n      position={[xOffset + fontSize * fontOffsetX, yOffset + fontSize * fontOffsetY, 0]} // font specific\n      material={material}\n      {...props}\n    >\n      {children}\n    </Text>\n  )\n}\n","import React, { useRef, useMemo, useEffect, forwardRef, MutableRefObject, ForwardedRef } from 'react'\nimport { useScrollRig, useImageAsTexture, useScrollbar } from '@14islands/r3f-scroll-rig'\nimport { Color, Vector2, ShaderMaterial, Mesh, ShaderMaterialParameters } from 'three'\nimport { useFrame, useThree } from '@react-three/fiber'\n\nimport mergeRefs from 'react-merge-refs'\n\ninterface WebGLImageProps {\n  el: MutableRefObject<HTMLImageElement>\n  scale?: any\n  scrollState?: any\n  vertexShader?: string\n  fragmentShader?: string\n  invalidateFrameLoop: boolean\n  widthSegments?: number\n  heightSegments?: number\n}\n\nexport const WebGLImage = forwardRef(\n  (\n    {\n      el,\n      scale,\n      scrollState,\n      vertexShader,\n      fragmentShader,\n      invalidateFrameLoop = false,\n      widthSegments = 128,\n      heightSegments = 128,\n      ...props\n    }: WebGLImageProps,\n    ref: ForwardedRef<Mesh>\n  ) => {\n    const material = useRef<ShaderMaterial>(null!)\n    const mesh = useRef<Mesh>(null!)\n\n    const { invalidate, gl, size } = useThree()\n    const pixelRatio = useThree((s) => s.viewport.dpr)\n    const { scroll } = useScrollbar()\n    const { scaleMultiplier } = useScrollRig()\n\n    const texture = useImageAsTexture(el)\n\n    const uniforms = useMemo(() => {\n      return {\n        u_color: { value: new Color('black') },\n        u_time: { value: 0 },\n        u_pixelRatio: { value: pixelRatio },\n        u_progress: { value: 0 },\n        u_visibility: { value: 0 },\n        u_viewport: { value: 0 },\n        u_velocity: { value: 0 }, // scroll speed\n        u_res: { value: new Vector2() }, // screen dimensions\n        u_rect: { value: new Vector2() }, // DOM el dimensions\n        u_size: { value: new Vector2() }, // Texture dimensions\n        u_texture: { value: null },\n        u_loaded: { value: false },\n        u_scaleMultiplier: { value: scaleMultiplier },\n      }\n    }, [pixelRatio])\n\n    // Fade in when texture loaded\n    useEffect(() => {\n      if (!texture) return\n      if (!material.current) return\n      material.current.uniforms.u_texture.value = texture\n      material.current.uniforms.u_size.value.set(texture.image.width, texture.image.height)\n      material.current.uniforms.u_loaded.value = true\n    }, [texture, gl])\n\n    useEffect(() => {\n      if (!material.current) return\n      material.current.uniforms.u_res.value.set(size.width, size.height)\n      material.current.uniforms.u_rect.value.set(scale?.[0], scale?.[1])\n    }, [size, scale])\n\n    useFrame((_, delta) => {\n      if (!scrollState.inViewport || !mesh.current || !material.current) return\n\n      if (!material.current.uniforms.u_loaded.value) return\n\n      material.current.uniforms.u_time.value += delta\n\n      // update scale while animating too\n      material.current.uniforms.u_rect.value.set(mesh.current.scale.x, mesh.current.scale.y)\n\n      // px velocity\n      material.current.uniforms.u_velocity.value = scroll.velocity\n\n      // percent of total visible distance that was scrolled (0 = just outside bottom of screen, 1 = just outside top of screen)\n      material.current.uniforms.u_progress.value = scrollState.progress\n\n      // percent of item height in view\n      material.current.uniforms.u_visibility.value = scrollState.visibility\n      // percent of window height scrolled since visible\n      material.current.uniforms.u_viewport.value = scrollState.viewport\n\n      if (invalidateFrameLoop) invalidate()\n    })\n\n    const args = useMemo(\n      () => [\n        {\n          vertexShader,\n          fragmentShader,\n        },\n      ],\n      [vertexShader, fragmentShader]\n    )\n\n    return (\n      <>\n        <mesh ref={mergeRefs([mesh, ref])} {...props}>\n          <planeGeometry attach=\"geometry\" args={[1, 1, widthSegments, heightSegments]} />\n          <shaderMaterial\n            ref={material}\n            args={args as [ShaderMaterialParameters]}\n            transparent={true}\n            uniforms={uniforms}\n          />\n        </mesh>\n      </>\n    )\n  }\n)\n","function mergeRefs(refs) {\n  return function (value) {\n    refs.forEach(function (ref) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nexport default mergeRefs;\n//# sourceMappingURL=react-merge-refs.esm.js.map\n","import React, { useRef } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { ScrollScene, useScrollRig } from '@14islands/r3f-scroll-rig'\nimport { Mesh } from 'three'\n\n// Parallax group inside ScrollScene\nconst ParallaxGroup = ({ children, scrollState, parallax }: any) => {\n  const mesh = useRef<Mesh>(null!)\n  const size = useThree((s) => s.size)\n  const { scaleMultiplier } = useScrollRig()\n\n  useFrame(() => {\n    if (!scrollState.inViewport) return\n    const parallaxProgress = scrollState.progress * 2 - 1\n    mesh.current.position.y = parallax * parallaxProgress * scaleMultiplier * size.height\n  })\n\n  return <mesh ref={mesh}>{children}</mesh>\n}\n\n/* Speed=1 is no parallax */\nexport const ParallaxScrollScene = ({ children, speed = 1, ...props }: any) => {\n  const extraMargin = 50 // add 50vh extra margin to avoid aggressive clipping\n  const parallaxAmount = speed - 1\n  return (\n    // @ts-ignore\n    <ScrollScene scissor={false} inViewportMargin={`${Math.max(0, 1 - 0.5) * 200 + extraMargin}%`} {...props}>\n      {(props) => (\n        <ParallaxGroup parallax={parallaxAmount} {...props}>\n          {children(props)}\n        </ParallaxGroup>\n      )}\n    </ScrollScene>\n  )\n}\n","import React, { useRef, useMemo } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { ScrollScene } from '@14islands/r3f-scroll-rig'\nimport { Group } from 'three'\n// @ts-ignore\nimport lerp from '@14islands/lerp'\n\n// Sticky mesh that covers full viewport size\nconst StickyChild = ({\n  children,\n  childTop,\n  childBottom,\n  scrollState,\n  parentScale,\n  childScale,\n  priority,\n  stickyLerp = 1.0,\n}: any) => {\n  const group = useRef<Group>(null!)\n  const size = useThree((s) => s.size)\n\n  useFrame((_, delta) => {\n    if (!scrollState.inViewport) return\n\n    const topOffset = childTop / size.height\n    const bottomOffset = childBottom / parentScale[1]\n\n    //  move to top of sticky area\n    const yTop = parentScale[1] * 0.5 - childScale[1] * 0.5\n    const yBottom = -parentScale[1] * 0.5 + childScale[1] * 0.5\n    const ySticky = -childTop + yTop - (scrollState.viewport - 1) * size.height\n\n    let y = group.current.position.y\n\n    // enter\n    if (scrollState.viewport + topOffset < 1) {\n      y = yTop\n    }\n    // sticky\n    else if (scrollState.visibility - bottomOffset < 1) {\n      y = ySticky\n    }\n    // exit\n    else {\n      y = yBottom\n    }\n\n    group.current.position.y = lerp(group.current.position.y, y, stickyLerp, delta)\n  }, priority) // must happen after ScrollScene's useFrame to be buttery\n\n  return <group ref={group}>{children}</group>\n}\n\nconst renderAsSticky = (children: any, size: any, childStyle: any, { stickyLerp, fillViewport }: any) => {\n  return ({ scale, ...props }: any) => {\n    // set child's scale to 100vh/100vw instead of the full DOM el\n    // the DOM el should be taller to indicate how far the scene stays sticky\n    let childScale = [parseFloat(childStyle.width), parseFloat(childStyle.height), 1]\n    let childTop = parseFloat(childStyle.top)\n    let childBottom = size.height - childTop - childScale[1]\n\n    if (fillViewport) {\n      childScale = [size.width, size.height, 1]\n      childTop = 0\n      childBottom = 0\n    }\n    return (\n      // @ts-ignore\n      <StickyChild\n        parentScale={scale}\n        childScale={childScale}\n        stickyLerp={stickyLerp}\n        childTop={childTop}\n        childBottom={childBottom}\n        {...props}\n      >\n        {children({ scale: childScale, ...props })}\n      </StickyChild>\n    )\n  }\n}\n\nexport const StickyScrollScene = ({ children, track, stickyLerp, fillViewport, ...props }: any) => {\n  const size = useThree((s) => s.size)\n\n  const internalRef = useRef(track.current)\n\n  // if tracked element is position:sticky, track the parent instead\n  // we want to track the progress of the entire sticky area\n  const childStyle = useMemo(() => {\n    const style = getComputedStyle(track.current)\n    if (style.position === 'sticky') {\n      internalRef.current = track.current.parentElement\n    } else {\n      console.error('StickyScrollScene: tracked element is not position:sticky')\n    }\n    return style\n  }, [track])\n\n  return (\n    <ScrollScene track={internalRef} {...props}>\n      {renderAsSticky(children, size, childStyle, { stickyLerp, fillViewport })}\n    </ScrollScene>\n  )\n}\n","const _lerp = require('lerp')\n\n/**\n * Drop-in replacement of standard lerp with optional frame delta and target fps\n * to maintain constant animation speed at various fps\n * \n * Based on http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * \n * @param {number} source Current value\n * @param {number} target Value to lerp towards\n * @param {number} rate Interpolation rate\n * @param {number} frameDelta Optional frame delta time in seconds. Should be 1/60 for a steady 60fps.\n * @param {number} targetFps Optional, target is 60 by default\n * @returns {number} interpolated value\n */\n\nfunction lerp(source, target, rate, frameDelta, targetFps = 60){\n  \n  // return normal lerp if no delta was passed\n  if (typeof frameDelta === 'undefined') {\n    return _lerp(source, target, rate)\n  }\n\n  const relativeDelta = frameDelta / (1 / targetFps)\n  const smoothing = 1 - rate\n  return _lerp(source, target, 1 - Math.pow(smoothing, relativeDelta));\n}\n\nmodule.exports = lerp","function lerp(v0, v1, t) {\n    return v0*(1-t)+v1*t\n}\nmodule.exports = lerp"],"names":["_ref","el","children","material","scale","font","_ref$fontOffsetY","fontOffsetY","fontOffsetX","_ref$fontOffsetX","overrideEmissive","_ref$overrideEmissive","color","props","size","useThree","scaleMultiplier","useScrollRig","useMemo","current","cs","window","getComputedStyle","letterSpacing","parseFloat","fontSize","lineHeight","textColor","Color","convertSRGBToLinear","textAlign","_useMemo","useEffect","emissive","xOffset","React","createElement","Text","_extends","maxWidth","width","overflowWrap","anchorX","anchorY","position","height","_excluded","forwardRef","ref","scrollState","vertexShader","fragmentShader","invalidateFrameLoop","_ref$invalidateFrameL","widthSegments","_ref$widthSegments","heightSegments","_ref$heightSegments","_objectWithoutPropertiesLoose","useRef","mesh","invalidate","gl","_useThree","pixelRatio","s","viewport","dpr","scroll","useScrollbar","useImageAsTexture","u_color","value","u_time","u_pixelRatio","u_progress","u_visibility","u_viewport","u_velocity","u_res","u_rect","Vector2","u_size","u_texture","u_loaded","u_scaleMultiplier","texture","uniforms","set","image","useFrame","_","delta","inViewport","x","y","velocity","progress","visibility","refs","args","Fragment","forEach","attach","transparent","ParallaxGroup","parallax","ParallaxScrollScene","_ref2$speed","_ref2","speed","ScrollScene","scissor","inViewportMargin","Math","max","parallaxAmount","_excluded2","StickyChild","childTop","childBottom","parentScale","childScale","priority","stickyLerp","_ref$stickyLerp","group","yTop","source","target","rate","frameDelta","targetFps","v1","t","pow","lerp","StickyScrollScene","_ref4","track","fillViewport","internalRef","childStyle","style","parentElement","console","error","_ref3","top","renderAsSticky"],"mappings":"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"}