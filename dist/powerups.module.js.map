{"version":3,"file":"powerups.module.js","sources":["../powerups/WebGLText.tsx","../powerups/WebGLImage.tsx","../../node_modules/react-merge-refs/dist/react-merge-refs.esm.js","../powerups/ParallaxScrollScene.tsx","../../node_modules/vecn/src/index.js","../powerups/StickyScrollScene.tsx","../../node_modules/@14islands/lerp/index.js","../../node_modules/lerp/index.js"],"sourcesContent":["import React, { useMemo, useEffect, ReactNode, MutableRefObject } from 'react'\nimport { Color, Material } from 'three'\nimport { useThree } from '@react-three/fiber'\nimport { Text } from '@react-three/drei'\n\nimport { useScrollRig } from '@14islands/r3f-scroll-rig'\n\n/**\n * Returns a WebGL Troika text mesh styled as the source DOM element\n */\n\ninterface WebGLTextProps {\n  el: MutableRefObject<HTMLElement>\n  children?: ReactNode\n  material?: Material\n  scale?: any\n  font?: string\n  fontOffsetY?: number\n  fontOffsetX?: number\n  overrideEmissive?: boolean\n  color?: string\n}\n\nexport const WebGLText = ({\n  el,\n  children,\n  material,\n  scale,\n  font,\n  fontOffsetY = 0,\n  fontOffsetX = 0,\n  overrideEmissive = false,\n  color,\n  ...props\n}: WebGLTextProps) => {\n  const { size } = useThree()\n  const { scaleMultiplier } = useScrollRig()\n\n  const { textColor, fontSize, textAlign, lineHeight, letterSpacing } = useMemo(() => {\n    if (!el.current) return {}\n    const cs = window.getComputedStyle(el.current)\n\n    // font size relative letter spacing\n    const letterSpacing = (parseFloat(cs.letterSpacing) || 0) / parseFloat(cs.fontSize)\n    const lineHeight = (parseFloat(cs.lineHeight) || 0) / parseFloat(cs.fontSize)\n    const textColor = new Color(color || cs.color).convertSRGBToLinear()\n\n    return {\n      letterSpacing,\n      lineHeight,\n      textColor,\n      fontSize: parseFloat(cs.fontSize) * scaleMultiplier,\n      textAlign: cs.textAlign,\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [el, size, scale, color, scaleMultiplier]) // recalc on resize\n\n  useEffect(() => {\n    if (material && overrideEmissive) {\n      // @ts-ignore\n      material.emissive = color\n    }\n  }, [material, color, overrideEmissive])\n\n  let xOffset = 0\n  if (textAlign === 'left' || textAlign === 'start') {\n    xOffset = scale[0] * -0.5\n  } else if (textAlign === 'right' || textAlign === 'end') {\n    xOffset = scale[0] * 0.5\n  }\n\n  const yOffset = scale ? scale[1] * 0.5 : size.height * 0.5\n\n  return (\n    <Text\n      fontSize={fontSize}\n      maxWidth={scale ? scale[0] : size.width}\n      lineHeight={lineHeight}\n      // @ts-ignore\n      textAlign={textAlign}\n      letterSpacing={letterSpacing}\n      overflowWrap=\"break-word\"\n      font={font}\n      color={textColor}\n      // @ts-ignore\n      anchorX={textAlign}\n      anchorY=\"top\" // so text moves down if row breaks\n      // @ts-ignore\n      position={[xOffset + fontSize * fontOffsetX, yOffset + fontSize * fontOffsetY, 0]} // font specific\n      material={material}\n      {...props}\n    >\n      {children}\n    </Text>\n  )\n}\n","import React, { useRef, useMemo, useEffect, forwardRef, MutableRefObject, ForwardedRef } from 'react'\nimport { useScrollRig, useImageAsTexture, useScrollbar } from '@14islands/r3f-scroll-rig'\nimport { Color, Vector2, ShaderMaterial, Mesh, ShaderMaterialParameters } from 'three'\nimport { useFrame, useThree } from '@react-three/fiber'\n\nimport mergeRefs from 'react-merge-refs'\n\ninterface WebGLImageProps {\n  el: MutableRefObject<HTMLImageElement>\n  scale?: any\n  scrollState?: any\n  vertexShader?: string\n  fragmentShader?: string\n  invalidateFrameLoop: boolean\n  widthSegments?: number\n  heightSegments?: number\n}\n\nexport const WebGLImage = forwardRef(\n  (\n    {\n      el,\n      scale,\n      scrollState,\n      vertexShader,\n      fragmentShader,\n      invalidateFrameLoop = false,\n      widthSegments = 128,\n      heightSegments = 128,\n      ...props\n    }: WebGLImageProps,\n    ref: ForwardedRef<Mesh>\n  ) => {\n    const material = useRef<ShaderMaterial>(null!)\n    const mesh = useRef<Mesh>(null!)\n\n    const { invalidate, gl, size } = useThree()\n    const pixelRatio = useThree((s) => s.viewport.dpr)\n    const { scroll } = useScrollbar()\n    const { scaleMultiplier } = useScrollRig()\n\n    const texture = useImageAsTexture(el)\n\n    const uniforms = useMemo(() => {\n      return {\n        u_color: { value: new Color('black') },\n        u_time: { value: 0 },\n        u_pixelRatio: { value: pixelRatio },\n        u_progress: { value: 0 },\n        u_visibility: { value: 0 },\n        u_viewport: { value: 0 },\n        u_velocity: { value: 0 }, // scroll speed\n        u_res: { value: new Vector2() }, // screen dimensions\n        u_rect: { value: new Vector2() }, // DOM el dimensions\n        u_size: { value: new Vector2() }, // Texture dimensions\n        u_texture: { value: null },\n        u_loaded: { value: false },\n        u_scaleMultiplier: { value: scaleMultiplier },\n      }\n    }, [pixelRatio])\n\n    // Fade in when texture loaded\n    useEffect(() => {\n      if (!texture) return\n      if (!material.current) return\n      material.current.uniforms.u_texture.value = texture\n      material.current.uniforms.u_size.value.set(texture.image.width, texture.image.height)\n      material.current.uniforms.u_loaded.value = true\n    }, [texture, gl])\n\n    useEffect(() => {\n      if (!material.current) return\n      material.current.uniforms.u_res.value.set(size.width, size.height)\n      material.current.uniforms.u_rect.value.set(scale?.[0], scale?.[1])\n    }, [size, scale])\n\n    useFrame((_, delta) => {\n      if (!scrollState.inViewport || !mesh.current || !material.current) return\n\n      if (!material.current.uniforms.u_loaded.value) return\n\n      material.current.uniforms.u_time.value += delta\n\n      // update scale while animating too\n      material.current.uniforms.u_rect.value.set(mesh.current.scale.x, mesh.current.scale.y)\n\n      // px velocity\n      material.current.uniforms.u_velocity.value = scroll.velocity\n\n      // percent of total visible distance that was scrolled (0 = just outside bottom of screen, 1 = just outside top of screen)\n      material.current.uniforms.u_progress.value = scrollState.progress\n\n      // percent of item height in view\n      material.current.uniforms.u_visibility.value = scrollState.visibility\n      // percent of window height scrolled since visible\n      material.current.uniforms.u_viewport.value = scrollState.viewport\n\n      if (invalidateFrameLoop) invalidate()\n    })\n\n    const args = useMemo(\n      () => [\n        {\n          vertexShader,\n          fragmentShader,\n        },\n      ],\n      [vertexShader, fragmentShader]\n    )\n\n    return (\n      <>\n        <mesh ref={mergeRefs([mesh, ref])} {...props}>\n          <planeGeometry attach=\"geometry\" args={[1, 1, widthSegments, heightSegments]} />\n          <shaderMaterial\n            ref={material}\n            args={args as [ShaderMaterialParameters]}\n            transparent={true}\n            uniforms={uniforms}\n          />\n        </mesh>\n      </>\n    )\n  }\n)\n","function mergeRefs(refs) {\n  return function (value) {\n    refs.forEach(function (ref) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nexport default mergeRefs;\n//# sourceMappingURL=react-merge-refs.esm.js.map\n","import React, { useRef } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { ScrollScene, useScrollRig } from '@14islands/r3f-scroll-rig'\nimport { Mesh } from 'three'\n\n// Parallax group inside ScrollScene\nconst ParallaxGroup = ({ children, scrollState, parallax }: any) => {\n  const mesh = useRef<Mesh>(null!)\n  const size = useThree((s) => s.size)\n  const { scaleMultiplier } = useScrollRig()\n\n  useFrame(() => {\n    if (!scrollState.inViewport) return\n    const parallaxProgress = scrollState.progress * 2 - 1\n    mesh.current.position.y = parallax * parallaxProgress * scaleMultiplier * size.height\n  })\n\n  return <mesh ref={mesh}>{children}</mesh>\n}\n\n/* Speed=1 is no parallax */\nexport const ParallaxScrollScene = ({ children, speed = 1, ...props }: any) => {\n  const extraMargin = 50 // add 50vh extra margin to avoid aggressive clipping\n  const parallaxAmount = speed - 1\n  return (\n    // @ts-ignore\n    <ScrollScene scissor={false} inViewportMargin={`${Math.max(0, 1 - 0.5) * 200 + extraMargin}%`} {...props}>\n      {(props) => (\n        <ParallaxGroup parallax={parallaxAmount} {...props}>\n          {children(props)}\n        </ParallaxGroup>\n      )}\n    </ScrollScene>\n  )\n}\n","/**\n * An object for memoizing vecType functions.\n * @type {Object}\n * @private\n */\nlet vecTypes = (function () {\n  const handler = {\n    get: function (obj, prop) {\n      if (!obj.hasOwnProperty(prop)) {\n        obj[prop] = getVecType(prop)\n      }\n      return obj[prop]\n    }\n  }\n\n  return new Proxy({}, handler)\n})()\n\n/**\n * A class for fixed-size vectors of numbers.\n * @extends Array\n */\nclass vecn extends Array {\n  /**\n   * Creates a vecn of the specified dimension. This should never be called\n   * by the user (as if this were an abstract class).\n   * @param {number} dimension The dimension of this vector.\n   * @param {number[]} [args=[]] The numbers to be put in the vector.\n   */\n  constructor (dimension, args) {\n    args = flattenOuter(args)\n\n    if (!args.every((x) => type(x) === 'Number')) {\n      throw new TypeError('All arguments must be numbers.')\n    }\n    if (args.length > 1 && args.length !== dimension) {\n      throw new Error('Argument list must be empty, have a single number, or have a length equal to the dimension.')\n    }\n\n    if (args.length === 0) {\n      args = [0]\n    }\n    if (args.length === 1 && type(args[0]) === 'Number') {\n      args = Array(dimension).fill(args[0])\n    }\n\n    if (dimension > 1) {\n      super(...args)\n    } else {\n      super(1)\n      this[0] = args[0]\n    }\n\n    Reflect.defineProperty(this, 'pop', {\n      value: undefined,\n      enumerable: false\n    })\n    Reflect.defineProperty(this, 'push', {\n      value: undefined,\n      enumerable: false\n    })\n    Reflect.defineProperty(this, 'shift', {\n      value: undefined,\n      enumerable: false\n    })\n    Reflect.defineProperty(this, 'unshift', {\n      value: undefined,\n      enumerable: false\n    })\n  }\n\n  /**\n   * The L2 norm (Euclidian norm) of the vector.\n   * @type {number}\n   */\n  get magnitude () {\n    return this.pnorm(2)\n  }\n\n  // --------------------------------------------------------------------------\n  //   Arithmetic\n\n  /**\n   * Returns a vector where this is divided by v componentwise. If v is\n   * a single number, the vector is scaled by 1/v.\n   * @param {number|number[]} v The value to multiply with.\n   *\n   * @returns {vecn} A new vector with the divided components.\n   */\n  div (v) {\n    checkCompatibility(v, this.dim, true)\n    if (type(v) === 'Number') {\n      v = (new Array(this.dim)).fill(v)\n    }\n\n    let result = []\n    for (let i = 0; i < this.length; ++i) {\n      result[i] = this[i] / v[i]\n    }\n    return vecTypes[this.dim](result)\n  }\n\n  /**\n   * Returns a vector where v is subtracted from the components of this\n   * vector. If v is a single number, it is subtracted to each component. If v\n   * is a vector, the vectors are combined componentwise.\n   * @param {number|number[]} v The value to subtract from this vector.\n   *\n   * @returns {vecn} A new vector with the combined components.\n   */\n  minus (v) {\n    checkCompatibility(v, this.dim, true)\n    if (type(v) === 'Number') {\n      v = (new Array(this.dim)).fill(v)\n    }\n\n    let result = []\n    for (let i = 0; i < this.dim; ++i) {\n      result[i] = this[i] - v[i]\n    }\n    return vecTypes[this.dim](result)\n  }\n\n  /**\n   * Negates each element in this vector.\n   * @returns {vecn} A new vector where all elements are negated.\n   */\n  neg () {\n    return vecTypes[this.dim](this.times(-1))\n  }\n\n  /**\n   * Returns a vector where v is added to the components of this vector. If v\n   * is a single number, it is added to each component. If v is a vector, the\n   * vectors are added componentwise.\n   * @param {number|number[]} v The value to add to this vector.\n   *\n   * @returns {vecn} A new vector with the summed components.\n   */\n  plus (v) {\n    checkCompatibility(v, this.dim, true)\n    if (type(v) === 'Number') {\n      v = (new Array(this.dim)).fill(v)\n    }\n\n    let result = []\n    for (let i = 0; i < this.dim; ++i) {\n      result[i] = this[i] + v[i]\n    }\n    return vecTypes[this.dim](result)\n  }\n\n  /**\n   * Returns a vector where each component of this was raised to a power p.\n   * @param {number} p The power to raise each component by.\n   *\n   * @returns {vecn} A new vector with the exponentiated components.\n   */\n  pow (p) {\n    let result = []\n    for (let i = 0; i < this.dim; ++i) {\n      result[i] = Math.pow(this[i], p)\n    }\n    return vecTypes[this.dim](result)\n  }\n\n  /**\n   * Returns a vector where v and this are multiplied componentwise. If v is\n   * a single number, the vector is scaled by v.\n   * @param {number|number[]} v The value to multiply with.\n   *\n   * @returns {vecn} A new vector with the multiplied components.\n   */\n  times (v) {\n    checkCompatibility(v, this.dim, true)\n    if (type(v) === 'Number') {\n      v = (new Array(this.dim)).fill(v)\n    }\n\n    let result = []\n    for (let i = 0; i < this.dim; ++i) {\n      result[i] = this[i] * v[i]\n    }\n    return vecTypes[this.dim](result)\n  }\n\n  // --------------------------------------------------------------------------\n  //   Vector Operations\n\n  /**\n   * Dot product of two vectors.\n   * @param {number[]} v The vector to dot with this one.\n   *\n   * @returns {number} The dot product between this and v.\n   */\n  dot (v) {\n    checkCompatibility(v, this.dim)\n\n    let result = 0\n    for (let i = 0; i < this.dim; ++i) {\n      result += this[i] * v[i]\n    }\n    return result\n  }\n\n  /**\n   * Scales this vector to a magnitude of 1.\n   *\n   * @returns {vecn} A new vector with scaled components.\n   */\n  normalize () {\n    return this.div(this.magnitude)\n  }\n\n  /**\n   * Evaluates the p-norm (or lp-norm) of this vector.\n   * @param {number} p The p-value to evaluate.\n   *\n   * @returns {number} The norm of this vector.\n   */\n  pnorm (p) {\n    let result = 0\n    for (let i = 0; i < this.dim; ++i) {\n      result += Math.pow(Math.abs(this[i]), p)\n    }\n    return Math.pow(result, 1 / p)\n  }\n\n  /**\n   * Reflects this vector across the provided vector. The normal can be imagined\n   * as a surface normal or as describing a hyperpalane.\n   * @param {number[]} normal A vector describing the hyperplane to reflect off of.\n   *\n   * @returns {vecn} The reflected vector.\n   */\n  reflect (normal) {\n    const n = normal.normalize()\n    return this.minus(n.times(2 * this.dot(n)))\n  }\n\n  // --------------------------------------------------------------------------\n  //   Extras\n\n  /**\n   * Finds the indices of the max value in this vector.\n   *\n   * @returns {number[]} An array of indices corresponding to the max values.\n   */\n  argmax () {\n    const maxVal = this.max()\n    return this.reduce((acc, x, i) => x === maxVal ? acc.concat([i]) : acc, [])\n  }\n\n  /**\n   * Finds the indices of the min value in this vector.\n   *\n   * @returns {number[]} An array of indices corresponding to the min values.\n   */\n  argmin () {\n    const minVal = this.min()\n    return this.reduce((acc, x, i) => x === minVal ? acc.concat([i]) : acc, [])\n  }\n\n  /**\n   * Creates a new vector from the provided indices of this one. Basically\n   * equivalent to swizzling.\n   * @param {number[]} indices The indices to select into a new vector.\n   *\n   * @returns {vecn} A new vector from the provided indices.\n   */\n  choose (indices) {\n    if (!Array.isArray(indices)) {\n      throw new TypeError('Argument must be a list of indices.')\n    }\n    if (!indices.every((i) => i < this.dim && isIndex(i.toString()))) {\n      throw new RangeError('All elements of argument must be valid indices.')\n    }\n\n    let v = []\n    indices.forEach((i) => v.push(this[i]))\n    return vecTypes[v.length](v)\n  }\n\n  /**\n   * Creates a duplicate of this vector. Same as passing this vector through\n   * the factory that created it.\n   *\n   * @returns {vecn} A deep copy of this vector.\n   */\n  copy () {\n    return vecTypes[this.dim](this)\n  }\n\n  /**\n   * Returns whether every element in each vector is equal.\n   * @param {number[]} v A vector to test against.\n   *\n   * @returns {boolean} True if both vectors have the same dimension and values.\n   */\n  equals (v) {\n    return v.length === this.dim && v.every((x, i) => this[i] === x)\n  }\n\n  /**\n   * Returns whether every element in each vector is approximately equal.\n   * @param {number[]} v A vector to test against.\n   * @param {number} epsilon The largest meaningful difference between two values.\n   *\n   * @returns {boolean} True if both vectors have the same dimension and the\n   * distance between each number is less than epsilon.\n   */\n  approximatelyEquals (v, epsilon = 0.00000001) {\n    return v.length === this.dim && v.every((x, i) => Math.abs(this[i] - x) < epsilon)\n  }\n\n  /**\n   * Returns the max value of this vector.\n   *\n   * @returns {number} The max value of this vector.\n   */\n  max () {\n    return Math.max(...this)\n  }\n\n  /**\n   * Returns the min value of this vector.\n   *\n   * @returns {number} The min value of this vector.\n   */\n  min () {\n    return Math.min(...this)\n  }\n\n  /**\n   * Sums the components of this vector.\n   *\n   * @returns {number} The sum of the components of this vector.\n   */\n  sum () {\n    return this.reduce((acc, x) => acc + x, 0)\n  }\n\n  /**\n   * Converts this vector into an Array.\n   *\n   * @returns {number[]} An array of the contents of this vector.\n   */\n  toArray () {\n    return Array.from(this)\n  }\n\n  // --------------------------------------------------------------------------\n  //   Array Overrides\n\n  /**\n   * Same as Array.prototype.concat, but return value is of a new vecType.\n   *\n   * @returns {vecn}\n   */\n  concat (...args) {\n    const result = super.concat.apply(this.toArray(), args)\n    return vecTypes[result.length](result)\n  }\n\n  /**\n   * Same as Array.prototype.filter, but returns an Array if the result has 0\n   * entries.\n   *\n   * @returns {vecn|number[]}\n   */\n  filter (...args) {\n    const result = super.filter.apply(this.toArray(), args)\n    if (result.length > 0) {\n      return vecTypes[result.length](result)\n    }\n    return result\n  }\n\n  /**\n   * Same as Array.prototype.map, but returns an Array if the result contains\n   * non-numbers.\n   *\n   * @returns {vecn|Array}\n   */\n  map (...args) {\n    const result = super.map(...args)\n    if (result.every((x) => type(x) === 'Number')) {\n      return result\n    }\n    return result.toArray()\n  }\n\n  /**\n   * Same as Array.prototype.slice, but returns an Array if the result has 0\n   * entries.\n   */\n  slice (...args) {\n    const result = super.slice.apply(this.toArray(), args)\n    if (result.length > 0) {\n      return vecTypes[result.length](result)\n    }\n    return result\n  }\n\n  /**\n   * A restrictive version of the Array.prototype.splice that requires all\n   * removed elements to be replaced.\n   */\n  splice (...args) {\n    let test = this.toArray()\n    test.splice(...args)\n\n    if (test.length !== this.dim) {\n      throw new Error('All removed elements must be replaced.')\n    }\n    if (!test.every((x) => type(x) === 'Number')) {\n      throw new TypeError('All elements must be numbers.')\n    }\n\n    test.forEach((x, i) => { this[i] = x })\n  }\n\n  toString () {\n    return this.reduce((s, x, i) => {\n      return s + x + (i === this.dim - 1 ? ' ' : ', ')\n    }, '[ ') + ']'\n  }\n}\n\n// --------------------------------------------------------------------------\n//   General Tools\n\n/**\n * Adds an arbitrary number of vectors together. All vectors must be of the same\n * dimension.\n * @param {...vecn} vecs Vectors to add together.\n *\n * @returns {vecn} The sum of all the provided vectors.\n */\nfunction add (...vecs) {\n  const dim = vecs[0].dim\n  if (!vecs.every((v) => v.dim === dim)) {\n    throw new TypeError('All vectors must have the same dimension.')\n  }\n  return vecs.reduce((acc, v) => acc.plus(v), vecTypes[dim]())\n}\n\n/**\n * The validator to be used in the proxy for all vec objects. Catches swizzling\n * properties, makes sure assignment only works for indices, and disallows\n * non-numerical assignments. Used in getVecType.\n * @constant\n * @type {Object}\n * @private\n */\nconst validator = {\n  set: function (obj, prop, value) {\n    if (prop === 'length') {\n      return false\n    }\n    if (isIndex(prop)) {\n      if (Number(prop) >= obj.dim) {\n        throw new RangeError('Vector may not have more elements than dimension.')\n      } else if (type(value) !== 'Number') {\n        throw new TypeError('Vectors may only contain numbers.')\n      } else {\n        obj[prop] = value\n        return true\n      }\n    }\n\n    const swizzleSymbolMap = getSwizzleSymbolMap(prop.toString())\n    if (obj.dim <= 4 && swizzleSymbolMap) {\n      swizzleSet(obj, prop.toString(), swizzleSymbolMap, value)\n      return true\n    }\n\n    return false\n  },\n  get: function (obj, prop) {\n    const swizzleSymbolMap = getSwizzleSymbolMap(prop.toString())\n    if (obj.dim <= 4 && swizzleSymbolMap) {\n      return swizzleGet(obj, prop, swizzleSymbolMap)\n    }\n\n    return obj[prop]\n  }\n}\n\n/**\n * Returns a factory function for vectors of the specified dimension.\n * @param {number} dim The dimension of the new vector type.\n *\n * @returns {Function} A factory (not a constructor) for creating new vecs.\n */\nfunction getVecType (dim) {\n  dim = Number(dim)\n\n  if (!(dim in vecTypes)) {\n    if (isNaN(dim)) throw new TypeError('Dimension must be coercible to a number.')\n    if (dim <= 0) throw new RangeError('Dimension must be positive.')\n    if (!Number.isInteger(dim)) throw new RangeError('Dimension must be positive.')\n\n    // Doing a little bit of exploiting ES6 to dynamically name the class\n    let classname = 'vec' + dim\n    let VecType = ({[classname]: class extends vecn {\n      constructor (...args) {\n        if (args.length === 1 && args[0] instanceof vecn) {\n          if (args[0].dim > dim) {\n            throw new TypeError('Cannot demote vectors.')\n          }\n          args = promoteArrayDimension(args[0].toArray(), dim)\n        }\n        super(dim, args)\n        Reflect.defineProperty(this, 'dim', {\n          value: dim,\n          writable: false,\n          enumerable: false\n        })\n      }\n    }})[classname]\n\n    let factory = function factory (...args) {\n      let target = new VecType(...args)\n      Object.preventExtensions(target)\n      return new Proxy(target, validator)\n    }\n    vecTypes[dim] = factory\n  }\n\n  return vecTypes[dim]\n}\n\n/**\n * The correct function for determining whether an object is a vecn.\n * @param {*} v The object in question.\n *\n * @returns {boolean} True if the object is an instance of vecn.\n */\nfunction isVec (v) {\n  return v instanceof vecn\n}\n\n/**\n * Linearly interpolates between two vectors.\n * @param {vecn} v1 The starting vector.\n * @param {vecn} v2 The ending vector.\n * @param {number} t The interpolant, which is clamped to the inteval [0, 1].\n *\n * @returns {vecn} The interpolated vector.\n */\nfunction lerp (v1, v2, t) {\n  if (v1.dim !== v2.dim) throw new TypeError('Vectors must have the same dimension.')\n  t = t < 0 ? 0 : (t > 1 ? 1 : t)\n  return v1.plus(v2.minus(v1).times(t))\n}\n\n/**\n * Multiplies an arbitrary number of vectors together. All vectors must be of the same\n * dimension.\n * @param {...vecn} vecs Vectors to multiply together.\n *\n * @returns {vecn} The product of all the provided vectors.\n */\nfunction multiply (...vecs) {\n  const dim = vecs[0].dim\n  if (!vecs.every((v) => v.dim === dim)) throw new TypeError('All vectors must have the same dimension.')\n  return vecs.reduce((acc, v) => acc.times(v), vecTypes[dim](1))\n}\n\n/**\n * Spherically interpolates between two vectors.\n * @param {vecn} v1 The starting vector.\n * @param {vecn} v2 The ending vector.\n * @param {number} t The interpolant, which is clamped to the inteval [0, 1].\n *\n * @returns {vecn} The interpolated vector.\n */\nfunction slerp (v1, v2, t) {\n  if (v1.dim !== v2.dim) throw new TypeError('Vectors must have the same dimension.')\n\n  t = t < 0 ? 0 : (t > 1 ? 1 : t)\n  let dot = v1.normalize().dot(v2.normalize())\n  dot = dot < -1 ? -1 : (dot > 1 ? 1 : dot)\n  const theta = Math.acos(dot) * t\n  const relative = v2.minus(v1.times(dot)).normalize()\n  const magnitude = v1.magnitude + ((v2.magnitude - v1.magnitude) * t)\n  return v1.times(Math.cos(theta)).plus(relative.times(Math.sin(theta)))\n    .normalize().times(magnitude)\n}\n\n// --------------------------------------------------------------------------\n//   Swizzling\n\n/**\n * The index corresponding to common names for indexing vectors.\n * @constant\n * @type {Object}\n * @private\n */\nconst namedIndices = [\n  {x: 0, y: 1, z: 2, w: 3},\n  {r: 0, g: 1, b: 2, a: 3},\n  {s: 0, t: 1, p: 2, q: 3}\n]\n\n/**\n * Gets the set of symbols corresponding to indices used for swizzling.\n * @private\n * @param {string} s The string used as a property to swizzle.\n *\n * @returns {Object} A map from characters to indices.\n */\nfunction getSwizzleSymbolMap (s) {\n  return namedIndices.find((map) => {\n    return s.split('').every((c) => c in map)\n  })\n}\n\n/**\n * Creates a new vector from the named indices given by swizzling.\n * @private\n * @param {vecn} v The vector to pull data from. The dimension is assumed to be\n * 2, 3, or 4, but this isn't enforced here.\n * @param {string} s The property being used to swizzle (e.g. 'xxy' or 'z').\n * @param {Object} set A map from characters to indices (assumed to be valid).\n *\n * @returns {undefined|number|vecn} Either undefined (if s isn't a valid swizzle\n * string), a number (if s has a length of 1), or a vecn where the values have\n * been rearranged according to the order given in s.\n */\nfunction swizzleGet (v, s, set) {\n  const newDim = s.length\n\n  if (newDim === 1) {\n    return v[set[s]]\n  }\n\n  let values = s.split('').reduce((acc, x) => {\n    let i = set[x]\n    return acc && i < v.dim ? acc.concat([v[i]]) : undefined\n  }, [])\n  return values ? new vecTypes[newDim](...values) : undefined\n}\n\n/**\n * Assigns the indexed values in v to the values in newVals in the order they\n * are described in in s.\n * @private\n * @param {vecn} v The starting vector.\n * @param {string} s The property being used to swizzle (e.g. 'xyz' or 'xz').\n * @param {Object} map A map from characters to indices (assumed to be valid).\n * @param {number|number[]} newVals The right hand side of the assignment\n *\n * @returns {vecn} A copy of v with the correct elements replaced.\n */\nfunction swizzleSet (v, s, map, newVals) {\n  if (s.length === 1) {\n    if (type(newVals) !== 'Number') {\n      throw new TypeError('Must set to a number')\n    }\n    v[map[s]] = newVals\n    return\n  }\n\n  if (!Array.isArray(newVals)) throw new TypeError('Right-hand side must be an array.')\n  if (s.length !== newVals.length) throw new TypeError('Right-hand side must have matching length.')\n  if (!newVals.every((item) => type(item) === 'Number')) throw new TypeError('All new values must be numbers.')\n\n  if (s.split('').some((c) => map[c] >= v.dim)) {\n    return\n  }\n\n  let valid = true\n  for (let i = 0, unique = {}; i < s.length; ++i) {\n    if (unique.hasOwnProperty(s[i])) {\n      valid = false\n      break\n    }\n    unique[s[i]] = true\n  }\n  if (!valid) throw new SyntaxError('Swizzle assignment does not allow symbols to be repeated.')\n\n  s.split('').map((c) => map[c]).forEach((index, i) => { v[index] = newVals[i] })\n}\n\n// --------------------------------------------------------------------------\n//   Helpers\n\n/**\n * Checks whether something is valid to do vector operations with and throws\n * a TypeError if not.\n * @private\n * @param {*} o An object to check.\n * @param {number} dim The dimension to check against.\n * @param {boolean} [numberValid=false] Whether scalars are compatible for the operation.\n */\nfunction checkCompatibility (o, dim, numberValid = false) {\n  if (numberValid && type(o) === 'Number') {\n    return\n  } else if (o.length && o.length === dim) {\n    return\n  }\n  throw new TypeError(`Invalid argument. Input must have matching dimension${numberValid ? 'or be a scalar' : ''}.`)\n}\n\n/**\n * Removes outer arrays and returns a reference to the innermost array. For\n * example, [[1, 2]] becomes [1, 2]. [[[['a'], true]]] becomes [['a'], true].\n * @private\n * @param {Array} arr The array to flatten.\n *\n * @returns {Array} A reference to the innermost array in arr.\n */\nfunction flattenOuter (arr) {\n  if (!(arr instanceof Array) || arr.length !== 1) {\n    return arr\n  }\n  if (arr[0] instanceof Array) {\n    return flattenOuter(arr[0])\n  }\n  return arr\n}\n\n/**\n * Checks whether a provided string can be used as a valid index into an array.\n * @private\n * @param {string} n A string representation of the number in question.\n *\n * @returns {boolean} True if n can be used to index an array.\n */\nfunction isIndex (n) {\n  return !isNaN(n) &&\n         Number(n).toString() === n &&\n         Number.isInteger(Number(n)) &&\n         Number(n) >= 0\n}\n\n/**\n * Lengthens an exsting array and fills new entries with 0 (does not mutate).\n * @private\n * @param {Array} arr The source array.\n * @param {number} dim The dimension of the new array.\n *\n * @returns {Array} A new array with length dim and arr as a prefix.\n */\nfunction promoteArrayDimension (arr, dim) {\n  return [...Array(dim)].map((_, i) => i < arr.length ? arr[i] : 0)\n}\n\n/**\n * Returns a string representing the type of an object. Similar to typeof, but\n * better with wrapped primitives, null, Array, etc...\n * @private\n * @param {*} obj The object to check the type of.\n *\n * @returns {string} A capitalized string describing the perceived type (i.e. 'Number', 'Array', etc...)\n */\nfunction type (obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1)\n}\n\nmodule.exports = {\n  getVecType,\n  isVec,\n  vec2: vecTypes[2],\n  vec3: vecTypes[3],\n  vec4: vecTypes[4],\n\n  add,\n  multiply,\n  lerp,\n  slerp\n}\n","import React, { useRef, useMemo } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { ScrollScene, useScrollRig } from '@14islands/r3f-scroll-rig'\nimport { Group } from 'three'\nimport vecn from 'vecn'\n// @ts-ignore\nimport lerp from '@14islands/lerp'\n\n// Sticky mesh that covers full viewport size\nconst StickyChild = ({\n  children,\n  childTop,\n  childBottom,\n  scrollState,\n  parentScale,\n  childScale,\n  scaleMultiplier,\n  priority,\n  stickyLerp = 1.0,\n}: any) => {\n  const group = useRef<Group>(null!)\n  const size = useThree((s) => s.size)\n\n  useFrame((_, delta) => {\n    if (!scrollState.inViewport) return\n\n    const topOffset = childTop / size.height\n    const bottomOffset = childBottom / parentScale[1]\n\n    //  move to top of sticky area\n    const yTop = parentScale[1] * 0.5 - childScale[1] * 0.5\n    const yBottom = -parentScale[1] * 0.5 + childScale[1] * 0.5\n    const ySticky = -childTop + yTop - (scrollState.viewport - 1) * size.height * scaleMultiplier\n\n    let y = group.current.position.y\n\n    // enter\n    if (scrollState.viewport + topOffset < 1) {\n      y = yTop\n    }\n    // sticky\n    else if (scrollState.visibility - bottomOffset < 1) {\n      y = ySticky\n    }\n    // exit\n    else {\n      y = yBottom\n    }\n\n    group.current.position.y = lerp(group.current.position.y, y, stickyLerp, delta)\n  }, priority) // must happen after ScrollScene's useFrame to be buttery\n\n  return <group ref={group}>{children}</group>\n}\n\nconst renderAsSticky = (\n  children: any,\n  size: any,\n  childStyle: any,\n  scaleMultiplier: number,\n  { stickyLerp, fillViewport }: any\n) => {\n  return ({ scale, ...props }: any) => {\n    // set child's scale to 100vh/100vw instead of the full DOM el\n    // the DOM el should be taller to indicate how far the scene stays sticky\n    let childScale = vecn.vec3(parseFloat(childStyle.width), parseFloat(childStyle.height), 1)\n    let childTop = parseFloat(childStyle.top)\n    let childBottom = size.height - childTop - childScale[1]\n\n    if (fillViewport) {\n      childScale = vecn.vec3(size.width, size.height, 1)\n      childTop = 0\n      childBottom = 0\n    }\n\n    return (\n      // @ts-ignore\n      <StickyChild\n        parentScale={scale}\n        childScale={childScale.times(scaleMultiplier)}\n        stickyLerp={stickyLerp}\n        childTop={childTop}\n        childBottom={childBottom}\n        scaleMultiplier={scaleMultiplier}\n        {...props}\n      >\n        {children({ scale: childScale.times(scaleMultiplier), ...props })}\n      </StickyChild>\n    )\n  }\n}\n\nexport const StickyScrollScene = ({ children, track, stickyLerp, fillViewport, ...props }: any) => {\n  const size = useThree((s) => s.size)\n  const { scaleMultiplier } = useScrollRig()\n\n  const internalRef = useRef(track.current)\n\n  // if tracked element is position:sticky, track the parent instead\n  // we want to track the progress of the entire sticky area\n  const childStyle = useMemo(() => {\n    const style = getComputedStyle(track.current)\n    if (style.position === 'sticky') {\n      internalRef.current = track.current.parentElement\n    } else {\n      console.error('StickyScrollScene: tracked element is not position:sticky')\n    }\n    return style\n  }, [track])\n\n  return (\n    <ScrollScene track={internalRef} {...props}>\n      {renderAsSticky(children, size, childStyle, scaleMultiplier, { stickyLerp, fillViewport })}\n    </ScrollScene>\n  )\n}\n","const _lerp = require('lerp')\n\n/**\n * Drop-in replacement of standard lerp with optional frame delta and target fps\n * to maintain constant animation speed at various fps\n * \n * Based on http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * \n * @param {number} source Current value\n * @param {number} target Value to lerp towards\n * @param {number} rate Interpolation rate\n * @param {number} frameDelta Optional frame delta time in seconds. Should be 1/60 for a steady 60fps.\n * @param {number} targetFps Optional, target is 60 by default\n * @returns {number} interpolated value\n */\n\nfunction lerp(source, target, rate, frameDelta, targetFps = 60){\n  \n  // return normal lerp if no delta was passed\n  if (typeof frameDelta === 'undefined') {\n    return _lerp(source, target, rate)\n  }\n\n  const relativeDelta = frameDelta / (1 / targetFps)\n  const smoothing = 1 - rate\n  return _lerp(source, target, 1 - Math.pow(smoothing, relativeDelta));\n}\n\nmodule.exports = lerp","function lerp(v0, v1, t) {\n    return v0*(1-t)+v1*t\n}\nmodule.exports = lerp"],"names":["_ref","el","children","material","scale","font","_ref$fontOffsetY","fontOffsetY","fontOffsetX","_ref$fontOffsetX","overrideEmissive","_ref$overrideEmissive","color","props","size","useThree","scaleMultiplier","useScrollRig","useMemo","current","cs","window","getComputedStyle","letterSpacing","parseFloat","fontSize","lineHeight","textColor","Color","convertSRGBToLinear","textAlign","_useMemo","useEffect","emissive","xOffset","React","createElement","Text","_extends","maxWidth","width","overflowWrap","anchorX","anchorY","position","height","_excluded","forwardRef","ref","scrollState","vertexShader","fragmentShader","invalidateFrameLoop","_ref$invalidateFrameL","widthSegments","_ref$widthSegments","heightSegments","_ref$heightSegments","_objectWithoutPropertiesLoose","useRef","mesh","invalidate","gl","_useThree","pixelRatio","s","viewport","dpr","scroll","useScrollbar","useImageAsTexture","u_color","value","u_time","u_pixelRatio","u_progress","u_visibility","u_viewport","u_velocity","u_res","u_rect","Vector2","u_size","u_texture","u_loaded","u_scaleMultiplier","texture","uniforms","set","image","useFrame","_","delta","inViewport","x","y","velocity","progress","visibility","refs","args","Fragment","forEach","attach","transparent","ParallaxGroup","parallax","ParallaxScrollScene","_ref2$speed","_ref2","speed","ScrollScene","scissor","inViewportMargin","Math","max","parallaxAmount","vecTypes","Proxy","get","obj","prop","hasOwnProperty","getVecType","vecn","Array","constructor","dimension","flattenOuter","every","type","TypeError","length","Error","fill","super","this","Reflect","defineProperty","undefined","enumerable","magnitude","pnorm","div","v","checkCompatibility","dim","result","i","minus","neg","times","plus","pow","p","dot","normalize","abs","reflect","normal","n","argmax","maxVal","reduce","acc","concat","argmin","minVal","min","choose","indices","isArray","isIndex","toString","RangeError","push","copy","equals","approximatelyEquals","epsilon","sum","toArray","from","apply","filter","map","slice","splice","test","validator","Number","swizzleSymbolMap","getSwizzleSymbolMap","newVals","item","split","some","c","valid","unique","SyntaxError","index","swizzleSet","newDim","values","swizzleGet","isNaN","isInteger","classname","VecType","arr","promoteArrayDimension","writable","target","Object","preventExtensions","namedIndices","z","w","r","g","b","a","t","q","find","o","numberValid","prototype","call","src","isVec","vec2","vec3","vec4","add","vecs","multiply","lerp","v1","v2","slerp","theta","acos","relative","cos","sin","_excluded2","StickyChild","childTop","childBottom","parentScale","childScale","priority","stickyLerp","_ref$stickyLerp","group","source","rate","frameDelta","targetFps","yTop","StickyScrollScene","_ref4","track","fillViewport","internalRef","childStyle","style","parentElement","console","error","_ref3","top","renderAsSticky"],"mappings":"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"}