{"version":3,"file":"powerups.umd.js","sources":["../powerups/WebGLImage.tsx","../../node_modules/react-merge-refs/dist/react-merge-refs.esm.js","../powerups/ParallaxScrollScene.tsx","../powerups/StickyScrollScene.tsx","../../node_modules/@14islands/lerp/index.js","../../node_modules/lerp/index.js","../powerups/WebGLText.tsx"],"sourcesContent":["import React, { useRef, useMemo, useEffect, forwardRef, MutableRefObject, ForwardedRef } from 'react'\nimport { useScrollRig, useImageAsTexture, useScrollbar } from '@14islands/r3f-scroll-rig'\nimport { Color, Vector2, ShaderMaterial, Mesh, ShaderMaterialParameters } from 'three'\nimport { useFrame, useThree } from '@react-three/fiber'\n\nimport mergeRefs from 'react-merge-refs'\n\ninterface WebGLImageProps {\n  el: MutableRefObject<HTMLImageElement>\n  scale?: any\n  scrollState?: any\n  vertexShader?: string\n  fragmentShader?: string\n  invalidateFrameLoop: boolean\n  widthSegments?: number\n  heightSegments?: number\n}\n\nexport const WebGLImage = forwardRef(\n  (\n    {\n      el,\n      scale,\n      scrollState,\n      vertexShader,\n      fragmentShader,\n      invalidateFrameLoop = false,\n      widthSegments = 128,\n      heightSegments = 128,\n      ...props\n    }: WebGLImageProps,\n    ref: ForwardedRef<Mesh>\n  ) => {\n    const material = useRef<ShaderMaterial>(null!)\n    const mesh = useRef<Mesh>(null!)\n\n    const { invalidate, gl, size } = useThree()\n    const pixelRatio = useThree((s) => s.viewport.dpr)\n    const { scroll } = useScrollbar()\n    const { scaleMultiplier } = useScrollRig()\n\n    const texture = useImageAsTexture(el)\n\n    const uniforms = useMemo(() => {\n      return {\n        u_color: { value: new Color('black') },\n        u_time: { value: 0 },\n        u_pixelRatio: { value: pixelRatio },\n        u_progress: { value: 0 },\n        u_visibility: { value: 0 },\n        u_viewport: { value: 0 },\n        u_velocity: { value: 0 }, // scroll speed\n        u_res: { value: new Vector2() }, // screen dimensions\n        u_rect: { value: new Vector2() }, // DOM el dimensions\n        u_size: { value: new Vector2() }, // Texture dimensions\n        u_texture: { value: null },\n        u_loaded: { value: false },\n        u_scaleMultiplier: { value: scaleMultiplier },\n      }\n    }, [pixelRatio])\n\n    // Fade in when texture loaded\n    useEffect(() => {\n      if (!texture) return\n      if (!material.current) return\n      material.current.uniforms.u_texture.value = texture\n      material.current.uniforms.u_size.value.set(texture.image.width, texture.image.height)\n      material.current.uniforms.u_loaded.value = true\n    }, [texture, gl])\n\n    useEffect(() => {\n      if (!material.current) return\n      material.current.uniforms.u_res.value.set(size.width, size.height)\n      material.current.uniforms.u_rect.value.set(scale?.[0], scale?.[1])\n    }, [size, scale])\n\n    useFrame((_, delta) => {\n      if (!scrollState.inViewport || !mesh.current || !material.current) return\n\n      if (!material.current.uniforms.u_loaded.value) return\n\n      material.current.uniforms.u_time.value += delta\n\n      // update scale while animating too\n      material.current.uniforms.u_rect.value.set(mesh.current.scale.x, mesh.current.scale.y)\n\n      // px velocity\n      material.current.uniforms.u_velocity.value = scroll.velocity\n\n      // percent of total visible distance that was scrolled (0 = just outside bottom of screen, 1 = just outside top of screen)\n      material.current.uniforms.u_progress.value = scrollState.progress\n\n      // percent of item height in view\n      material.current.uniforms.u_visibility.value = scrollState.visibility\n      // percent of window height scrolled since visible\n      material.current.uniforms.u_viewport.value = scrollState.viewport\n\n      if (invalidateFrameLoop) invalidate()\n    })\n\n    const args = useMemo(\n      () => [\n        {\n          vertexShader,\n          fragmentShader,\n        },\n      ],\n      [vertexShader, fragmentShader]\n    )\n\n    return (\n      <>\n        <mesh ref={mergeRefs([mesh, ref])} {...props}>\n          <planeGeometry attach=\"geometry\" args={[1, 1, widthSegments, heightSegments]} />\n          <shaderMaterial\n            ref={material}\n            args={args as [ShaderMaterialParameters]}\n            transparent={true}\n            uniforms={uniforms}\n          />\n        </mesh>\n      </>\n    )\n  }\n)\n","function mergeRefs(refs) {\n  return function (value) {\n    refs.forEach(function (ref) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nexport default mergeRefs;\n//# sourceMappingURL=react-merge-refs.esm.js.map\n","import React, { useRef } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { ScrollScene, useScrollRig } from '@14islands/r3f-scroll-rig'\nimport { Mesh } from 'three'\n\n// Parallax group inside ScrollScene\nconst ParallaxGroup = ({ children, scrollState, parallax }: any) => {\n  const mesh = useRef<Mesh>(null!)\n  const size = useThree((s) => s.size)\n  const { scaleMultiplier } = useScrollRig()\n\n  useFrame(() => {\n    if (!scrollState.inViewport) return\n    const parallaxProgress = scrollState.progress * 2 - 1\n    mesh.current.position.y = parallax * parallaxProgress * scaleMultiplier * size.height\n  })\n\n  return <mesh ref={mesh}>{children}</mesh>\n}\n\n/* Speed=1 is no parallax */\nexport const ParallaxScrollScene = ({ children, speed = 1, ...props }: any) => {\n  const extraMargin = 50 // add 50vh extra margin to avoid aggressive clipping\n  const parallaxAmount = speed - 1\n  return (\n    // @ts-ignore\n    <ScrollScene scissor={false} inViewportMargin={`${Math.max(0, 1 - 0.5) * 200 + extraMargin}%`} {...props}>\n      {(props) => (\n        <ParallaxGroup parallax={parallaxAmount} {...props}>\n          {children(props)}\n        </ParallaxGroup>\n      )}\n    </ScrollScene>\n  )\n}\n","import React, { useRef, useMemo } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { ScrollScene } from '@14islands/r3f-scroll-rig'\nimport { Group } from 'three'\n// @ts-ignore\nimport lerp from '@14islands/lerp'\n\n// Sticky mesh that covers full viewport size\nconst StickyChild = ({\n  children,\n  childTop,\n  childBottom,\n  scrollState,\n  parentScale,\n  childScale,\n  priority,\n  stickyLerp = 1.0,\n}: any) => {\n  const group = useRef<Group>(null!)\n  const size = useThree((s) => s.size)\n\n  useFrame((_, delta) => {\n    if (!scrollState.inViewport) return\n\n    const topOffset = childTop / size.height\n    const bottomOffset = childBottom / parentScale[1]\n\n    //  move to top of sticky area\n    const yTop = parentScale[1] * 0.5 - childScale[1] * 0.5\n    const yBottom = -parentScale[1] * 0.5 + childScale[1] * 0.5\n    const ySticky = -childTop + yTop - (scrollState.viewport - 1) * size.height\n\n    let y = group.current.position.y\n\n    // enter\n    if (scrollState.viewport + topOffset < 1) {\n      y = yTop\n    }\n    // sticky\n    else if (scrollState.visibility - bottomOffset < 1) {\n      y = ySticky\n    }\n    // exit\n    else {\n      y = yBottom\n    }\n\n    group.current.position.y = lerp(group.current.position.y, y, stickyLerp, delta)\n  }, priority) // must happen after ScrollScene's useFrame to be buttery\n\n  return <group ref={group}>{children}</group>\n}\n\nconst renderAsSticky = (children: any, size: any, childStyle: any, { stickyLerp, fillViewport }: any) => {\n  return ({ scale, ...props }: any) => {\n    // set child's scale to 100vh/100vw instead of the full DOM el\n    // the DOM el should be taller to indicate how far the scene stays sticky\n    let childScale = [parseFloat(childStyle.width), parseFloat(childStyle.height), 1]\n    let childTop = parseFloat(childStyle.top)\n    let childBottom = size.height - childTop - childScale[1]\n\n    if (fillViewport) {\n      childScale = [size.width, size.height, 1]\n      childTop = 0\n      childBottom = 0\n    }\n    return (\n      // @ts-ignore\n      <StickyChild\n        parentScale={scale}\n        childScale={childScale}\n        stickyLerp={stickyLerp}\n        childTop={childTop}\n        childBottom={childBottom}\n        {...props}\n      >\n        {children({ scale: childScale, ...props })}\n      </StickyChild>\n    )\n  }\n}\n\nexport const StickyScrollScene = ({ children, track, stickyLerp, fillViewport, ...props }: any) => {\n  const size = useThree((s) => s.size)\n\n  const internalRef = useRef(track.current)\n\n  // if tracked element is position:sticky, track the parent instead\n  // we want to track the progress of the entire sticky area\n  const childStyle = useMemo(() => {\n    const style = getComputedStyle(track.current)\n    if (style.position === 'sticky') {\n      internalRef.current = track.current.parentElement\n    } else {\n      console.error('StickyScrollScene: tracked element is not position:sticky')\n    }\n    return style\n  }, [track])\n\n  return (\n    <ScrollScene track={internalRef} {...props}>\n      {renderAsSticky(children, size, childStyle, { stickyLerp, fillViewport })}\n    </ScrollScene>\n  )\n}\n","const _lerp = require('lerp')\n\n/**\n * Drop-in replacement of standard lerp with optional frame delta and target fps\n * to maintain constant animation speed at various fps\n * \n * Based on http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * \n * @param {number} source Current value\n * @param {number} target Value to lerp towards\n * @param {number} rate Interpolation rate\n * @param {number} frameDelta Optional frame delta time in seconds. Should be 1/60 for a steady 60fps.\n * @param {number} targetFps Optional, target is 60 by default\n * @returns {number} interpolated value\n */\n\nfunction lerp(source, target, rate, frameDelta, targetFps = 60){\n  \n  // return normal lerp if no delta was passed\n  if (typeof frameDelta === 'undefined') {\n    return _lerp(source, target, rate)\n  }\n\n  const relativeDelta = frameDelta / (1 / targetFps)\n  const smoothing = 1 - rate\n  return _lerp(source, target, 1 - Math.pow(smoothing, relativeDelta));\n}\n\nmodule.exports = lerp","function lerp(v0, v1, t) {\n    return v0*(1-t)+v1*t\n}\nmodule.exports = lerp","import React, { useMemo, useEffect, ReactNode, MutableRefObject } from 'react'\nimport { Color, Material } from 'three'\nimport { useThree } from '@react-three/fiber'\nimport { Text } from '@react-three/drei'\n\nimport { useScrollRig } from '@14islands/r3f-scroll-rig'\n\n/**\n * Returns a WebGL Troika text mesh styled as the source DOM element\n */\n\ninterface WebGLTextProps {\n  el: MutableRefObject<HTMLElement>\n  children?: ReactNode\n  material?: Material\n  scale?: any\n  font?: string\n  fontOffsetY?: number\n  fontOffsetX?: number\n  overrideEmissive?: boolean\n  color?: string\n}\n\nexport const WebGLText = ({\n  el,\n  children,\n  material,\n  scale,\n  font,\n  fontOffsetY = 0,\n  fontOffsetX = 0,\n  overrideEmissive = false,\n  color,\n  ...props\n}: WebGLTextProps) => {\n  const { size } = useThree()\n  const { scaleMultiplier } = useScrollRig()\n\n  const { textColor, fontSize, textAlign, lineHeight, letterSpacing } = useMemo(() => {\n    if (!el.current) return {}\n    const cs = window.getComputedStyle(el.current)\n\n    // font size relative letter spacing\n    const letterSpacing = (parseFloat(cs.letterSpacing) || 0) / parseFloat(cs.fontSize)\n    const lineHeight = (parseFloat(cs.lineHeight) || 0) / parseFloat(cs.fontSize)\n    const textColor = new Color(color || cs.color).convertSRGBToLinear()\n\n    return {\n      letterSpacing,\n      lineHeight,\n      textColor,\n      fontSize: parseFloat(cs.fontSize) * scaleMultiplier,\n      textAlign: cs.textAlign,\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [el, size, scale, color, scaleMultiplier]) // recalc on resize\n\n  useEffect(() => {\n    if (material && overrideEmissive) {\n      // @ts-ignore\n      material.emissive = color\n    }\n  }, [material, color, overrideEmissive])\n\n  let xOffset = 0\n  if (textAlign === 'left' || textAlign === 'start') {\n    xOffset = scale[0] * -0.5\n  } else if (textAlign === 'right' || textAlign === 'end') {\n    xOffset = scale[0] * 0.5\n  }\n\n  const yOffset = scale ? scale[1] * 0.5 : size.height * 0.5\n\n  return (\n    <Text\n      fontSize={fontSize}\n      maxWidth={scale ? scale[0] : size.width}\n      lineHeight={lineHeight}\n      // @ts-ignore\n      textAlign={textAlign}\n      letterSpacing={letterSpacing}\n      overflowWrap=\"break-word\"\n      font={font}\n      color={textColor}\n      // @ts-ignore\n      anchorX={textAlign}\n      anchorY=\"top\" // so text moves down if row breaks\n      // @ts-ignore\n      position={[xOffset + fontSize * fontOffsetX, yOffset + fontSize * fontOffsetY, 0]} // font specific\n      material={material}\n      {...props}\n    >\n      {children}\n    </Text>\n  )\n}\n"],"names":["_excluded","forwardRef","_ref","ref","el","scale","scrollState","vertexShader","fragmentShader","invalidateFrameLoop","_ref$invalidateFrameL","widthSegments","_ref$widthSegments","heightSegments","_ref$heightSegments","props","_objectWithoutPropertiesLoose","material","useRef","mesh","useThree","invalidate","gl","_useThree","size","pixelRatio","s","viewport","dpr","scroll","useScrollbar","scaleMultiplier","useScrollRig","useImageAsTexture","useMemo","u_color","value","Color","u_time","u_pixelRatio","u_progress","u_visibility","u_viewport","u_velocity","u_res","u_rect","Vector2","u_size","u_texture","u_loaded","u_scaleMultiplier","useEffect","texture","current","uniforms","set","image","width","height","useFrame","_","delta","inViewport","x","y","velocity","progress","visibility","refs","args","React","createElement","Fragment","forEach","attach","transparent","ParallaxGroup","children","parallax","position","_excluded2","StickyChild","childTop","childBottom","parentScale","childScale","priority","stickyLerp","_ref$stickyLerp","group","yTop","source","target","rate","frameDelta","targetFps","v1","t","Math","pow","lerp","_ref2$speed","_ref2","speed","ScrollScene","_extends","scissor","inViewportMargin","max","parallaxAmount","_ref4","track","fillViewport","internalRef","childStyle","style","getComputedStyle","parentElement","console","error","_ref3","parseFloat","top","renderAsSticky","font","_ref$fontOffsetY","fontOffsetY","fontOffsetX","_ref$fontOffsetX","overrideEmissive","_ref$overrideEmissive","color","cs","window","letterSpacing","fontSize","lineHeight","textColor","convertSRGBToLinear","textAlign","_useMemo","emissive","xOffset","Text","maxWidth","overflowWrap","anchorX","anchorY"],"mappings":"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"}